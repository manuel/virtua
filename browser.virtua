;; -*- Lisp -*-

(defvar alert (js-global "alert"))
(defvar prompt (js-global "prompt"))

(defvar *window* (js-global "window"))
(defvar *document* (js-global "document"))
(defvar *body* (get-slot *document* "body"))

(define-js-methods
  "appendChild"
  "createElement"
  "createTextNode"
  "focus"
  "getElementById"
  "scrollTo"
  "setAttribute"
  )

(defun console.log (foo)
  (js-call (js-global "console") "log" (to-string foo)))

(defun define-dom-element (name)
  (defmacro maker children env
    (console.log children)
    (def e (createElement *document* name))
    (map (lambda (aname)
           (setAttribute e aname (eval (get-slot children aname) env)))
         (xons-names children))
    (map (lambda (child)
           (let ((ch (eval child env)))
             (if (instance? ch String)
                            (appendChild e (createTextNode *document* ch))
                            (appendChild e ch))))
         children)
    e)
  (eval (list def (intern name) maker) *top-level-environment*))

(defun define-dom-elements names
  (map define-dom-element names))

(define-dom-elements
  "DIV"
  "FORM"
  "INPUT"
  "P"
  "SPAN"
  "TABLE"
  "TD"
  "TH"
  "TR"
  )

;; -*- Lisp -*-

(defgeneric present)
(defmethod present ((any Object))
  (SPAN () (to-string any)))

(defmethod present ((any User-Object))
  (defun present-slot (name)
    (TR ()
      (TH (:class "lisp-slot-name") name)
      (TD () (present-small (get-slot any name)))))
  (DIV (:class "lisp-user-object")
    (DIV (:class "lisp-user-object-class") (debug-name (class-of any)))
    (eval (list* TABLE () (map present-slot (slot-names any))) (get-current-environment))))

(defgeneric present-small)
(defmethod present-small ((any Object))
  (SPAN () (to-string any)))

;(defmethod present ((b Boolean))
;  (def e (INPUT (:type "checkbox" :disabled "disabled")))
;  (when b (setAttribute e "checked" #t))
;  e)

;(defmethod present ((s String))
;  (DIV (:class "lisp-string") s))

(defclass Repl-Note ()
  (content)
  (:constructor make-repl-note (content)))

(defgeneric repl-note)
(defmethod repl-note ((s String))
  (print (make-repl-note s)))

(defmethod present ((n Repl-Note))
  (DIV (:class "lisp-repl-note")
    (.content n)))

(defclass Repl-Input ()
  (string)
  (:constructor make-repl-input (string)))

(defmethod present ((i Repl-Input))
  (DIV (:class "lisp-repl-input")
    (.string i)))

(defclass Repl-Error ()
  (string)
  (:constructor make-repl-error (string)))

(defmethod present ((e Repl-Error))
  (DIV (:class "lisp-repl-error")
    (present (.string e))))

(defun print (string)
  (appendChild (getElementById *document* "lisp_output")
               (DIV (:class "lisp-repl-output") (present string))))

(defun repl-submit ()
  (block exit
    (unwind-protect
         (call-with-handler
          (lambda (exc) #t)
          (lambda (exc)
            (print (make-repl-error exc))
            (return-from exit #f))
          (lambda ()
            (defvar input (get-slot (getElementById *document* "lisp_line") "value"))
            (print (make-repl-input input))
            (map (lambda (form)
                   (print (eval form *top-level-environment*)))
                 (read-from-string input))
            #f))
      (scrollTo *window* 0 (get-slot *body* "scrollHeight"))
      (set-slot! (getElementById *document* "lisp_line") "value" ""))))

(defun print-stack-trace (f)
  (block done
    (loop
       (if (= #void f) 
           (return-from done #void)
           (progn
             (print f) (set! f (get-slot f "parent")))))))

(set! (js-global "lisp_repl_onsubmit") (js-function repl-submit))

(appendChild *body*
   (DIV ()
      (DIV (:id "lisp_output"))
      (FORM (:id "lisp_input" :onsubmit "return lisp_repl_onsubmit()")
         (INPUT (:type "text" :id "lisp_line" :name "line")))))

(repl-note "Welcome to Virtua!")
(focus (getElementById *document* "lisp_line"))

;; Test suite for Virtua kernel language.           -*- Lisp -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

;;;; scope
(assert (= 1 (scope
                (def x 1)
                (assert (= x 1))
                (scope
                   (assert (= x 1))
                   (def x 2)
                   (assert (= x 2)))
                (assert (= x 1))
                x)))

;;;; vau
(assert (eq? ((vau #ignore env env))
             (get-current-environment)))

;;;; Equality

(assert (= #t #t))
(assert (= #f #f))
(assert (= 1 1))
(assert (= -1 -1))
(assert (= 1.444 1.444))
(assert (not? (= 1 1.444)))
(assert (= "foo" "foo"))
(assert (= "" ""))
(assert (not? (= "foo" "bar")))
(assert (not? (= "foo" #t)))
(assert (not? (= #t "foo")))
(assert (not? (= "foo" 12)))
(assert (not? (= 12 "foo")))
(assert (not? (= (cons 1 2) 12)))
(assert (not? (= 12 (cons 1 2))))

;;;; Printing

(assert (= "#t" (to-string #t)))
(assert (= "#f" (to-string #f)))
(assert (= "()" (to-string ())))
(assert (= "1" (to-string 1)))
(assert (= "1.22" (to-string 1.22)))

(assert (instance? 19222222222222222222222222222222222222222222222222222 Number))
(assert (instance? -19222222222222222222222222222222222222222222222222222 Number))
(assert (instance? -19222222222222222222222222222222222222222222222222222.5 Number))
(assert (instance? 19222222222222222222222222222222222222222222222222222.3 Number))
(assert (instance? "foo" String))
(assert (instance? "" String))

(assert (eq? #t #t))
(assert (eq? #f #f))
(assert (eq? () ()))
(assert (eq? #ignore #ignore))
(assert (eq? #void #void))

;;;; Object System

(assert (instance? Object Class))
(assert (instance? Class Class))

(scope
   (defclass C)
   (def obj (make-instance C))
   (assert (instance? obj C))
   (assert (not? (instance? obj String))))

(scope
   (defclass A)
   (defclass B)
   (defclass C (A B))
   (assert (subclass? A Object))
   (assert (subclass? C A))
   (assert (subclass? C B))
   (assert (not? (subclass? A B)))
   (assert (not? (subclass? A C)))
   (assert (not? (subclass? B A)))
   (assert (not? (subclass? B C))))

(scope
   (defclass X)
   (defclass Y)
   (defclass Z (Y))
   (defgeneric say)
   (defmethod say ((self X)) "x")
   (defmethod say ((self Y)) "y")
   (assert (= (say (make-instance X)) "x"))
   (assert (= (say (make-instance Y)) "y"))
   (assert (= (say (make-instance Z)) "y")))

(scope
   (definterface Foo)
   (defclass Bar (Object))
   (defimplementation Bar Foo)
   (assert (subclass? Bar Foo)))


(scope
   (defclass Foo ()
      (the-slot)
      (:constructor make-foo (the-slot)))
   (def the-foo (make-foo 12))
   (assert (= (.the-slot the-foo) 12))
   (set! (.the-slot the-foo) 13)
   (assert (= (.the-slot the-foo) 13)))

(scope
   (defclass Point ()
      (x y)
      (:constructor make-point (x y)))
   (def pt (make-point 12 24))
   (assert (instance? pt Point))
   (assert (instance? pt Object))
   (assert (= 12 (.x pt)))
   (assert (= 24 (.y pt)))
   (set! (.x pt) 100)
   (assert (= 100 (.x pt)))
   (assert (= 24 (.y pt)))
   (set! (.y pt) 200)
   (assert (= 100 (.x pt)))
   (assert (= 200 (.y pt))))

;;;; Control Flow

(assert (= 12 ($js-try #void 12)))
(assert (= "error" ($js-try (lambda (e) e) (js-throw "error"))))

(assert (= 12 (block x 12)))
(assert (= 12 (block x 1 2 3 12)))
(assert (= 13 (block x (return-from x 13) 12)))

(assert (= 1 (unwind-protect 1)))
(assert (= 1 (unwind-protect 1 2)))
(assert (= 1 (unwind-protect 1 2 3)))
(assert (= 1 (block x (unwind-protect (return-from x 1) 2 3))))
(assert (= 3 (block x (unwind-protect 1 2 (return-from x 3)))))
(assert (= 3 (block x (unwind-protect (return-from x 1) 2 (return-from x 3)))))

;;;; Misc

(assert (= "foobar" (strcat "foo" "bar")))

;;;; Options

(assert (= 12 (if-option (name (option 12)) name 13)))
(assert (= 13 (if-option (name none) name 13)))
(assert (= #void (if-option (name none) name)))

;;;; Conditions

(assert (= 12 (call-with-handler (lambda #ignore #t) (lambda #ignore 12) (lambda () (signal "foo")))))

;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

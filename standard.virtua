;; Virtua standard language.                        -*- Lisp -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

($define! define $define!)
(define if $if)
(define #void #inert)
(define _ #ignore)
(define vau $vau)
(define catch $catch)
(define loop $loop)

(define ' (vau (form) _ form))

;;;; These are adapted from John Shutt's SINK and the R-1RK.

(define begin
   ((wrap (vau (seq2) _
             (seq2
                (define aux
                   (vau (head . tail) env
                      (if (null? tail)
                          (eval head env)
                          (seq2
                             (eval head env)
                             (eval (cons aux tail) env)))))
                (vau body env
                   (if (null? body)
                       #void
                       (eval (cons aux body) env))))))
      (vau (first second) env
         ((wrap (vau _ _ (eval second env)))
          (eval first env)))))

(define list (wrap (vau x _ x)))

(define list*
   (wrap (vau args _
            (begin
               (define aux
                  (wrap (vau ((head . tail)) _
                           (if (null? tail)
                               head
                               (cons head (aux tail))))))
               (aux args)))))

(define vau
   ((wrap (vau (vau) _
             (vau (formals eformal . body) env
                (eval (list vau formals eformal
                            (cons begin body))
                      env))))
      vau))

(define lambda
   (vau (formals . body) env
      (wrap (eval (list* vau formals _ body)
                  env))))

(define caar (lambda (((x . _) . _)) x))
(define cdar (lambda (((_ . x) . _)) x))
(define cadr (lambda ((_ . (x . _))) x))
(define cddr (lambda ((_ . (_ . x))) x))

(define apply
   (lambda (appv arg . opt)
      (eval (cons (unwrap appv) arg)
            (if (null? opt)
                (make-environment)
                (car opt)))))

(define or?
   (lambda (a b) (if a #t (if b #t #f))))

(define map-list
   (lambda (fn list)
      (if (null? list)
          ()
          (cons (fn (car list))
                (map-list fn (cdr list))))))

(define map-2-lists
   (lambda (fn list-1 list-2)
      (if (or? (null? list-1) (null? list-2))
          ()
          (cons (fn (car list-1) (car list-2))
                (map-2-lists fn (cdr list-1) (cdr list-2))))))

(define let
   (vau (bindings . body) env
      (eval (cons (list* lambda (map-list car bindings) body)
                  (map-list cadr bindings))
            env)))

(define cond
   (vau clauses env
      (define aux
         (lambda ((test . body) . clauses)
            (if (eval test env)
                (apply (wrap begin) body env)
                (apply (wrap cond) clauses env))))
      (if (null? clauses)
          #void
          (apply aux clauses))))

(define not? (lambda (x) (if x #f #t)))

(define get-current-environment (wrap (vau () e e)))

;;;; Virtua-specific forms

(define assert
   (vau (that) env
      (if (not? (eval that env))
          (error (to-string that))
          #void)))

;; Execute body expressions in throwaway environment.
(define scope
   (vau body _
      ((lambda ()
          (eval (list* begin body) (get-current-environment))))))

(define define-class
   (vau (name superclasses) env
      (eval (list define name
               (list make-class (map-list (lambda (class-name)
                                             (eval class-name env))
                                          superclasses)))
            env)))


(define define-constructor
   (vau (name class slots) env
      (eval (list define name (list lambda slots
                                 (list construct-with-slots class slots)))
            env)))

(define construct-with-slots
   (vau (class slots) env
      (let ((obj (make-instance (eval class env))))
         (map-list (lambda (slot)
                      (set-slot! obj (to-string slot) (eval slot env)))
                   slots)
         obj)))


;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

;; Virtua standard language.                        -*- Lisp -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

($define! def $define!)
(def if $if)
(def void #inert)
(def _ #ignore)
(def vau $vau)

(def quote (vau (form) _ form))

;;;; These are adapted from John Shutt's SINK and the R-1RK.

(def do
   ((wrap (vau (seq2) _
             (seq2
                (def aux
                   (vau (head . tail) env
                      (if (null? tail)
                          (eval head env)
                          (seq2
                             (eval head env)
                             (eval (cons aux tail) env)))))
                (vau body env
                   (if (null? body)
                       void
                       (eval (cons aux body) env))))))
      (vau (first second) env
         ((wrap (vau _ _ (eval second env)))
          (eval first env)))))

(def list (wrap (vau x _ x)))

(def list*
   (wrap (vau args _
            (do
               (def aux
                  (wrap (vau ((head . tail)) _
                           (if (null? tail)
                               head
                               (cons head (aux tail))))))
               (aux args)))))

(def vau
   ((wrap (vau (vau) _
             (vau (formals eformal . body) env
                (eval (list vau formals eformal
                            (cons do body))
                      env))))
      vau))

(def lambda
   (vau (formals . body) env
      (wrap (eval (list* vau formals _ body)
                  env))))

(def caar (lambda (((x . _) . _)) x))
(def cdar (lambda (((_ . x) . _)) x))
(def cadr (lambda ((_ . (x . _))) x))
(def cddr (lambda ((_ . (_ . x))) x))

(def apply
   (lambda (appv arg . opt)
      (eval (cons (unwrap appv) arg)
            (if (null? opt)
                (make-environment)
                (car opt)))))

(def cond
   (vau clauses env
      (def aux
         (lambda ((test . body) . clauses)
            (if (eval test env)
                (apply (wrap $sequence) body env)
                (apply (wrap $cond) clauses env))))
      (if (null? clauses)
          void
          (apply aux clauses))))

(def not? (lambda (x) (if x #f #t)))

(def get-current-environment (wrap (vau () e e)))

;;;; Virtua-specific forms

(def assert
   (lambda (that)
      (if (not? that)
          (error "Assertion failed.")
          void)))

;; Execute body expressions in throwaway environment.
(def scope
   (vau body _
      ((lambda ()
          (eval (list* do body) (get-current-environment))))))


;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

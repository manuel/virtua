;; Virtua standard language.                      -*- Scheme -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

($define! def $define!)
(def begin $begin)
(def if $if)
(def vau $vau)
(def loop $loop)

;;;; These are adapted from John Shutt's SINK and the R-1RK.

(def list (wrap (vau x #ignore x)))

(def list*
   (wrap (vau args #ignore
            (begin
               (def aux
                  (wrap (vau ((head . tail)) #ignore
                           (if (null? tail)
                               head
                               (cons head (aux tail))))))
               (aux args)))))

(def vau
   ((wrap (vau (vau) #ignore
             (vau (formals eformal . body) env
                (eval (list vau formals eformal
                            (cons begin body))
                      env))))
      vau))

(def lambda
   (vau (formals . body) env
      (wrap (eval (list* vau formals #ignore body)
                  env))))

(def caar (lambda (((x . #ignore) . #ignore)) x))
(def cdar (lambda (((#ignore . x) . #ignore)) x))
(def cadr (lambda ((#ignore . (x . #ignore))) x))
(def cddr (lambda ((#ignore . (#ignore . x))) x))

(def apply
   (lambda (appv arg . opt)
      (eval (cons (unwrap appv) arg)
            (if (null? opt)
                (make-environment)
                (car opt)))))

(def or?
   (lambda (a b) (if a #t (if b #t #f))))

(def map
   (lambda (fn list)
      (if (null? list)
          ()
          (cons (fn (car list))
                (map fn (cdr list))))))

(def let
   (vau (bindings . body) env
      (eval (cons (list* lambda (map car bindings) body)
                  (map cadr bindings))
            env)))

(def let*
   (vau (bindings . body) env
      (eval (if (null? bindings)
                (list* let bindings body)
                (list let
                      (list (car bindings))
                      (list* let* (cdr bindings) body)))
            env)))

(def cond
   (vau clauses env
      (def aux
         (lambda ((test . body) . clauses)
            (if (eval test env)
                (apply (wrap begin) body env)
                (apply (wrap cond) clauses env))))
      (if (null? clauses)
          #void
          (apply aux clauses))))

(def not? (lambda (x) (if x #f #t)))

(def when
   (vau (test . body) env
      (eval (list if test (list* begin body) #void) env)))

(def unless
   (vau (test . body) env
      (eval (list if test #void (list* begin body)) env)))

(def get-current-environment (wrap (vau () e e)))

(def *top-level-environment* (get-current-environment))

(def provide
   (vau (symbols . body) env
      (eval (list def symbols
               (list let ()
                  (list* begin body)
                  (list* list symbols)))
            env)))

;;;; Virtua-specific forms

(def defun
   (vau (name args . body) env
      (eval (list def name (list* lambda args body)) env)))

(def to-string anything-to-string) ;; later redefined as generic

(def assert
   (vau (that) env
      (if (not? (eval that env))
          (error (to-string that))
          #void)))

(def Block-Escape (make-class ()))
(def make-block-escape (lambda () (make-instance Block-Escape)))

(def block
   (vau (name . body) env
      (let ((tag (make-block-escape)) (val #void))
         ($js-try (lambda (exc) (if (eq? tag exc) val (js-throw exc)))
            (apply (eval (list* lambda name body) env)
                   (lambda (the-val) (set! val the-val) (js-throw tag)))))))

(def return-from (lambda (exit val) (exit val)))

(def unwind-protect
   (vau (protected . cleanup) env
      (eval (list $unwind-protect protected (list* begin cleanup)) env)))

(def scope
   (vau body env
      (eval (list* let () body) env)))

(def set!
   (vau (place value) env
      (if (instance? place Pair)
          (let (((cmb . args) place))
             (eval (list* (setter (eval cmb env)) value args) env))
          (eval (list $set! place value) env))))

(def setter (lambda (obj) (get-slot obj "setter")))
(def set-setter! (lambda (obj setter) (set-slot! obj "setter" setter)))

(def define-js-method
   (lambda (name)
      (def js-method (lambda (rcv . args)
                        (apply js-call (list* rcv name args))))
      (eval (list def (intern name) js-method) *top-level-environment*)))

(def define-js-methods
   (lambda names
      (map define-js-method names)))

(define-js-methods
   "charAt"
   "concat"
   "slice"
   )

(def strcat (lambda strings (apply concat (list* "" strings))))
(def strelt charAt)
(def strslice slice)

;;;; Object System

(provide (defclass
          definterface
          defimplementation
          defgeneric
          defmethod)

   (def defclass
      (vau (name . stuff) env
         (if (null? stuff)
             (eval (list def name (make-class ())) env)
             (let (((superclasses . stuff) stuff))
                (let ((c (make-class (map (lambda (sc) (eval sc env)) superclasses))))
                   (eval (list def name c) env)
                   (unless (null? stuff)
                      (let (((slots . stuff) stuff))
                         (map (lambda (slot) (eval (list defslot slot) env)) slots)
                         (unless (null? stuff)
                            (let (((#ignore ctor-name args) (car stuff)))
                               (eval (list defconstructor ctor-name name args) env))))))))
         name))

   (def definterface
      (vau (name) env
         (eval (list defclass name ()) env)))

   (def defimplementation add-superclass!)

   (def defconstructor
      (vau (name class slots) env
         (eval (list def name
                  (list lambda slots
                     (list construct-with-slots class slots)))
               env)))

   (def construct-with-slots
      (vau (class slots) env
         (let ((obj (make-instance (eval class env))))
            (map (lambda (slot)
                    (set-slot! obj (symbol-name slot) (eval slot env)))
                 slots)
            obj)))

   (def defslot
      (vau (name) env
         (let* ((slot (symbol-name name))
                (generic-name (intern (strcat "." slot)))
                (reader (lambda (obj) (get-slot obj slot)))
                (writer (lambda (val obj) (set-slot! obj slot val))))
            (set-setter! reader writer)
            (eval (list def generic-name reader) env))
         name))

   (def defgeneric
      (vau (name . #ignore) env
         (eval (list def name
                  (lambda (self . otree) (send self (symbol-name name) otree)))
               env)
         name))

   (def defmethod
      (vau (name ((rcv class) . rest) . body) env
         (put-method! (eval class env)
                      (symbol-name name)
                      (eval (list* vau (list* rcv rest) #ignore body) env))
         name)))

(defgeneric =)
(defmethod = ((a Object) b) (eq? a b))

(defgeneric to-string)
(defmethod to-string ((a Object)) (anything-to-string a))

;;;; Property Lists

;; Calls fun with name and value of each property in plist.
(def map-plist
   (lambda (fun plist)
      (if (null? plist)
          ()
          (cons (fun (car plist) (cadr plist))
                (map-plist fun (cddr plist))))))

;;;; Options

(definterface Option)

(defclass None (Option))

(def none (make-instance None))

(defclass Some (Option)
   (value)
   (:constructor option (value)))

(defgeneric option-supplied? (option))
(defmethod option-supplied? ((n None)) #f)
(defmethod option-supplied? ((s Some)) #t)

(def if-option
   (vau ((name option) then . else) env
      (let ((o (eval option env)))
         (if (option-supplied? o)
             (eval (list let (list (list name (.value o))) then) env)
             (unless (null? else)
                (eval (car else) env))))))

;;;; Collections

(provide (Iterable
          Iterator
          iterator
          has-next?
          next!
          at)

   (definterface Iterable)
   (definterface Iterator)
   (defgeneric iterator)
   (defgeneric has-next?)
   (defgeneric next!)
   (defgeneric at)

   (defmethod at ((s String) (i Number))
      (strelt s i))

)

;;;; Condition System

(provide (Condition
          Error
          Warning
          Restart
          Unhandled-Restart-Error
          call-with-handler
          signal
          default-handler)

   (defclass Condition)
   (defclass Error (Condition))
   (defclass Warning (Condition))

   (defclass Restart (Condition))
   (defclass Unhandled-Restart-Error (Error)
      (restart)
      (:constructor unhandled-restart-error (restart)))


   (def *handler-stack* none)

   (defclass Handler-Frame ()
      (parent-option
       matcher
       handler)
      (:constructor make-handler-frame (parent-option matcher handler)))

   (def call-with-handler
      (lambda (matcher handler thunk)
         (let ((saved-stack *handler-stack*))
            (set! *handler-stack* (option (make-handler-frame *handler-stack*
                                                              matcher
                                                              handler)))
            (unwind-protect ($js-try (lambda (exc)
                                        (if (instance? exc Block-Escape)
                                            (js-throw exc)
                                            (signal exc)))
                               (thunk))
               (set! *handler-stack* saved-stack)))))

   (def signal
      (lambda (condition)
         (def do-signal
            (lambda (frame-option)
               (if-option (frame frame-option)
                  (if ((.matcher frame) condition)
                      ((.handler frame) condition)
                      (do-signal (.parent-option frame)))
                  (default-handler condition))))
         (do-signal *handler-stack*)))


   (defgeneric default-handler (condition))

   (defmethod default-handler ((c Condition))
      #void)

   (defmethod default-handler ((w Warning))
      (print w))

   (defmethod default-handler ((e Error))
      (invoke-debugger e))

   (defmethod default-handler ((r Restart))
      (signal (unhandled-restart-error r)))

)

;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

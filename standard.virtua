;; Virtua standard language.                        -*- Lisp -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

($define! def $define!)
(def defvar def)
(def begin $begin)
(def progn $begin)
(def if $if)
(def vau $vau)
(def loop $loop)

;;;; These are adapted from John Shutt's SINK and the R-1RK.

(def list (wrap (vau x #ignore x)))

(def list*
   (wrap (vau args #ignore
            (begin
               (def aux
                  (wrap (vau ((head . tail)) #ignore
                           (if (null? tail)
                               head
                               (cons head (aux tail))))))
               (aux args)))))

(def vau
   ((wrap (vau (vau) #ignore
             (vau (formals eformal . body) env
                (eval (list vau formals eformal
                            (cons begin body))
                      env))))
      vau))

(def lambda
   (vau (formals . body) env
      (wrap (eval (list* vau formals #ignore body)
                  env))))

(def set-debug-name!
   (lambda (obj name) (set-slot! obj "lisp_debug_name" name)))
(def debug-name
   (lambda (obj) (if (has-slot? obj "lisp_debug_name")
                     (get-slot obj "lisp_debug_name")
                     "anon")))

(def defun
   (vau (name args . body) env
      (def fun (eval (list* lambda args body) env))
      (set-debug-name! fun (symbol-name name))
      (eval (list def name fun) env)))

(def defmacro
   (vau (name args e . body) env
      (def fun (eval (list* vau args e body) env))
      (set-debug-name! fun (symbol-name name))
      (eval (list def name fun) env)))

(defun caar (((x . #ignore) . #ignore)) x)
(defun cdar (((#ignore . x) . #ignore)) x)
(defun cadr ((#ignore . (x . #ignore))) x)
(defun cddr ((#ignore . (#ignore . x))) x)

(defun apply (appv arg . opt)
  (eval (cons (unwrap appv) arg)
        (if (null? opt)
            (make-environment)
            (car opt))))

(defun or? (a b) (if a #t (if b #t #f)))

(defun map (fn list)
  (if (null? list)
      ()
      (cons (fn (car list))
            (map fn (cdr list)))))

(defmacro let (bindings . body) env
  (eval (cons (list* lambda (map car bindings) body)
              (map cadr bindings))
        env))

(defmacro let* (bindings . body) env
  (eval (if (null? bindings)
            (list* let bindings body)
            (list let
                  (list (car bindings))
                  (list* let* (cdr bindings) body)))
        env))

(defmacro cond clauses env
  (defun aux ((test . body) . clauses)
    (if (eval test env)
        (apply (wrap begin) body env)
        (apply (wrap cond) clauses env)))
  (if (null? clauses)
      #void
      (apply aux clauses)))

(defun not? (x) (if x #f #t))

(defmacro when (test . body) env
  (eval (list if test (list* begin body) #void) env))

(defmacro unless (test . body) env
  (eval (list if test #void (list* begin body)) env))

(defmacro while (condition . body) env
  (def wrapped-body (list* begin body))
  (block done
    (loop
       (if (eval condition env)
           (eval wrapped-body env)
           (return-from done #void)))))

(defmacro until (condition . body) env
  (eval (list* while (list not? condition) body) env))

(def get-current-environment (wrap (vau () e e)))

(def *top-level-environment* (get-current-environment))

(defmacro provide (symbols . body) env
  (eval (list def symbols
              (list let ()
                    (list* begin body)
                    (list* list symbols)))
        env))

;;;; Virtua-specific forms

(defun to-string (obj) (anything-to-string obj)) ;; later redefined as generic

(defmacro assert (that) env
  (if (not? (eval that env))
      (js-throw (to-string that))
      #void))

(def Block-Escape (make-class () "Block-Escape"))
(defun make-block-escape () (make-instance Block-Escape))

(defmacro block (name . body) env
  (let ((tag (make-block-escape)) (val #void))
    ($js-try (lambda (exc) (if (eq? tag exc) val (js-throw exc)))
             (apply (eval (list* lambda name body) env)
                    (lambda (the-val) (set! val the-val) (js-throw tag))))))

(defun return-from (exit . val)
  (exit (if (null? val) #void (car val))))

(defmacro unwind-protect (protected . cleanup) env
  (eval (list $unwind-protect protected (list* begin cleanup)) env))

(defmacro scope body env
  (eval (list* let () body) env))

(defmacro set! (place value) env
  (if (instance? place Pair)
      (let (((cmb . args) place))
        (eval (list* (setter (eval cmb env)) value args) env))
      (eval (list $set! place value) env)))

(defmacro fluid-let ((name value) . body) env
  (let ((saved-value (eval name env)))
    (eval (list set! name value) env)
    (unwind-protect (eval (list* begin body) env)
      (eval (list set! name saved-value) env))))

(defun setter (obj) (get-slot obj "setter"))
(defun set-setter! (obj setter) (set-slot! obj "setter" setter))
(set-setter! js-global (lambda (val name) (set-js-global! name val))) ; erm

(defun define-js-method (name)
  (defun js-method (rcv . args)
    (apply js-call (list* rcv name args)))
  (eval (list def (intern name) js-method) *top-level-environment*))

(defun define-js-methods names
  (map define-js-method names))

(define-js-methods
  "charAt"
  "concat"
  "slice"
  )

(defun strcat strings
  (apply concat (list* "" strings)))
(def strelt charAt)
(def strslice slice)

;;;; Object System

(provide (defclass
          definterface
          defimplementation
          defgeneric
          defmethod)

   (defmacro defclass (name . stuff) env
     (if (null? stuff)
         (eval (list def name (make-class () (symbol-name name))) env)
         (let (((superclasses . stuff) stuff))
           (let ((c (make-class (map (lambda (sc) (eval sc env)) superclasses)
                                (symbol-name name))))
             (eval (list def name c) env)
             (unless (null? stuff)
               (let (((slots . stuff) stuff))
                 (map (lambda (slot) (eval (list defslot slot) env)) slots)
                 (unless (null? stuff)
                   (let (((#ignore ctor-name args) (car stuff)))
                     (eval (list defconstructor ctor-name name args) env))))))))
     name)
   
   (defmacro definterface (name) env
     (eval (list defclass name ()) env))

   (def defimplementation add-superclass!)

   (defmacro defconstructor (name class slots) env
     (eval (list def name
                 (list lambda slots
                       (list construct-with-slots class slots)))
           env))

   (defmacro construct-with-slots (class slots) env
     (let ((obj (make-instance (eval class env))))
       (map (lambda (slot)
              (set-slot! obj (symbol-name slot) (eval slot env)))
            slots)
       obj))

   (defmacro defslot (name) env
     (let* ((slot (symbol-name name))
            (generic-name (intern (strcat "." slot)))
            (reader (lambda (obj) (get-slot obj slot)))
            (writer (lambda (val obj) (set-slot! obj slot val))))
       (set-setter! reader writer)
       (eval (list def generic-name reader) env))
     name)

   (defmacro defgeneric (name . #ignore) env
     (eval (list def name
                 (lambda (self . otree) (send self (symbol-name name) otree)))
           env)
     name)

   (defmacro defmethod (name ((rcv class) . rest) . body) env
     (put-method! (eval class env)
                  (symbol-name name)
                  (eval (list* vau (list* rcv rest) #ignore body) env))
     name)

   )

(defgeneric =)
(defmethod = ((a Object) b) (eq? a b))

(defgeneric to-string)

(defmethod to-string ((a Object))
  (strcat "#[object " (anything-to-string a) "]"))

(defmethod to-string ((a Number))
  (anything-to-string a))

(defmethod to-string ((a String))
  (anything-to-string a))

(defmethod to-string ((a Symbol))
  (symbol-name a))

(defmethod to-string ((a Class))
  (strcat "#[class " (debug-name a) "]"))

(defmethod to-string ((a Nil))
  "()")

(defmethod to-string ((a Boolean))
  (if a "#t" "#f"))

(defmethod to-string ((a Ignore))
  "#ignore")

(defmethod to-string ((a Void))
  "#void")

(defmethod to-string ((a Undefined))
  "#undefined")

(defmethod to-string ((a Combiner))
  (strcat "#[" (debug-name a) "]"))

(defmethod to-string ((cmb Compound-Combiner))
  (strcat "#[" (debug-name cmb) " " (to-string (get-slot cmb "lisp_ptree")) "]"))

(defmethod to-string ((cmb Wrapper))
  (strcat "#[" (debug-name cmb) " " (to-string (unwrap cmb)) "]"))

(defmethod to-string ((a Environment))
  "#[environment]")

(defmethod to-string ((p Pair))
  (defun pair-to-string (p)
    (def kar (car p))
    (def kdr (cdr p))
    (if (null? kdr)
        (to-string kar)
        (if (instance? kdr Pair)
            (strcat (to-string kar) " " (pair-to-string kdr))
            (strcat (to-string kar) " . " (to-string kdr)))))
  (strcat "(" (pair-to-string p) ")"))

(defmethod to-string ((frm Stack-Frame))
  (strcat (to-string (get-slot frm "cmb")) " " 
          (to-string (get-slot frm "otree"))))

;;;; Property Lists

;; Calls fun with name and value of each property in plist.
(defun map-plist (fun plist)
  (if (null? plist)
      ()
      (cons (fun (car plist) (cadr plist))
            (map-plist fun (cddr plist)))))

;;;; Options

(definterface Option)

(defclass None (Option))

(defvar none (make-instance None))

(defclass Some (Option)
  (value)
  (:constructor option (value)))

(defgeneric option-supplied? (option))
(defmethod option-supplied? ((n None)) #f)
(defmethod option-supplied? ((s Some)) #t)

(defmacro if-option ((name option) then . else) env
  (let ((o (eval option env)))
    (if (option-supplied? o)
        (eval (list let (list (list name (.value o))) then) env)
        (unless (null? else)
          (eval (car else) env)))))

;;;; Collections

(provide (Iterable
          Iterator
          iterator
          has-next?
          next!
          at)

   (defclass Iterable)
   (defclass Iterator)
   (defgeneric iterator)
   (defgeneric has-next?)
   (defgeneric next!)
   (defgeneric at)

   (defmethod at ((s String) (i Number))
      (strelt s i))

)

;;;; Condition System

(provide (Condition
          Error
          Warning
          Restart
          Unhandled-Restart-Error
          call-with-handler
          signal
          default-handler)

   (defclass Condition)
   (defclass Error (Condition))
   (defclass Warning (Condition))

   (defclass Restart (Condition))
   (defclass Unhandled-Restart-Error (Error)
      (restart)
      (:constructor unhandled-restart-error (restart)))


   (defvar *handler-stack* none)

   (defclass Handler-Frame ()
     (parent-option
      matcher
      handler)
     (:constructor make-handler-frame (parent-option matcher handler)))

   (defun call-with-handler (matcher handler thunk)
     (let ((saved-stack *handler-stack*))
       (set! *handler-stack* (option (make-handler-frame *handler-stack*
                                                         matcher
                                                         handler)))
       (unwind-protect ($js-try (lambda (exc)
                                  (if (instance? exc Block-Escape)
                                      (js-throw exc)
                                      (signal exc)))
                                (thunk))
         (set! *handler-stack* saved-stack))))

   (defun signal (condition)
     (defun do-signal (frame-option)
       (if-option (frame frame-option)
         (if ((.matcher frame) condition)
             ((.handler frame) condition)
             (do-signal (.parent-option frame)))
         (default-handler condition)))
     (do-signal *handler-stack*))


   (defgeneric default-handler (condition))

   (defmethod default-handler ((c Condition))
      #void)

   (defmethod default-handler ((w Warning))
      (print w))

   (defmethod default-handler ((e Error))
      (invoke-debugger e))

   (defmethod default-handler ((r Restart))
      (signal (unhandled-restart-error r)))

)

(set! (js-global "lisp_simple_error")
      (js-function (lambda (msg)
                     (print-stack-trace (stack-frame))
                     (js-throw msg))))

;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

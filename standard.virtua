;; Virtua standard language.                        -*- Lisp -*-
;; Copyright (c) 2012 Manuel Simoni. See license at end of file.

($define! def $define!)
(def defvar def)
(def begin $begin)
(def progn $begin)
(def if $if)
(def vau $vau)
(def loop $loop)

;;;; These are adapted from John Shutt's SINK and the R-1RK.

(def list (wrap (vau x #ignore x)))

(def list*
   (wrap (vau args #ignore
            (begin
               (def aux
                  (wrap (vau ((head . tail)) #ignore
                           (if (null? tail)
                               head
                               (cons head (aux tail))))))
               (aux args)))))

(def vau
   ((wrap (vau (vau) #ignore
             (vau (formals eformal . body) env
                (eval (list vau formals eformal
                            (cons begin body))
                      env))))
      vau))

(def lambda
   (vau (formals . body) env
      (wrap (eval (list* vau formals #ignore body)
                  env))))

(def set-debug-name!
   (lambda (obj name) (set-slot! obj "lisp_debug_name" name)))
(def debug-name
   (lambda (obj) (if (has-slot? obj "lisp_debug_name")
                     (get-slot obj "lisp_debug_name")
                     "anon")))

(def defun
   (vau (name args . body) env
      (def fun (eval (list* lambda args body) env))
      (set-debug-name! fun (symbol-name name))
      (eval (list def name fun) env)))

(def defmacro
   (vau (name args e . body) env
      (def fun (eval (list* vau args e body) env))
      (set-debug-name! fun (symbol-name name))
      (eval (list def name fun) env)))

(def caar (lambda (((x . #ignore) . #ignore)) x))
(def cdar (lambda (((#ignore . x) . #ignore)) x))
(def cadr (lambda ((#ignore . (x . #ignore))) x))
(def cddr (lambda ((#ignore . (#ignore . x))) x))

(defun apply (appv arg . opt)
  (eval (cons (unwrap appv) arg)
        (if (null? opt)
            (make-environment)
            (car opt))))

(defmacro or? (a b) env
  (if (eval a env)
      #t
      (if (eval b env)
          #t
          #f)))

(defmacro and? (a b) env
  (if (eval a env)
      (if (eval b env)
          #t
          #f)
      #f))

(defun map (fn list)
  (if (null? list)
      ()
      (cons (fn (car list))
            (map fn (cdr list)))))

(defmacro let (bindings . body) env
  (eval (cons (list* lambda (map car bindings) body)
              (map cadr bindings))
        env))

(defmacro let* (bindings . body) env
  (eval (if (null? bindings)
            (list* let bindings body)
            (list let
                  (list (car bindings))
                  (list* let* (cdr bindings) body)))
        env))

(defmacro cond clauses env
  (def aux (lambda ((test . body) . clauses)
             (if (eval test env)
                 (apply (wrap begin) body env)
                 (apply (wrap cond) clauses env))))
  (if (null? clauses)
      #void
      (apply aux clauses)))

(defun not? (x) (if x #f #t))

(defmacro when (test . body) env
  (eval (list if test (list* begin body) #void) env))

(defmacro unless (test . body) env
  (eval (list if test #void (list* begin body)) env))

(defmacro while (condition . body) env
  (def wrapped-body (list* begin body))
  (block done
    (loop
       (if (eval condition env)
           (eval wrapped-body env)
           (return-from done #void)))))

(defmacro until (condition . body) env
  (eval (list* while (list not? condition) body) env))

(def get-current-environment (wrap (vau () e e)))

(def *top-level-environment* (get-current-environment))

(defmacro provide (symbols . body) env
  (eval (list def symbols
              (list let ()
                    (list* begin body)
                    (list* list symbols)))
        env))

;;;; Virtua-specific forms

(defun pair? (obj) (instance? obj Pair))
(defun symbol? (obj) (instance? obj Symbol))

(def type-assertions
  (lambda (args)
    (if (pair? args)
        (let ((arg (car args)))
          (if (pair? arg)
              (cons (list assert (list instance? (car arg) (cadr arg)))
                    (type-assertions (cdr args)))
              (type-assertions (cdr args))))
        ())))

(def untype
  (lambda (args)
    (if (pair? args)
        (let ((arg (car args)))
          (cons (if (pair? arg) (car arg) arg)
                (untype (cdr args))))
        args)))

(defmacro typed-lambda (args . body) env
  (eval (list* lambda (untype args) (list* begin (type-assertions args)) body) env))

(def defun
   (vau (name args . body) env
      (def fun (eval (list* typed-lambda args body) env))
      (set-debug-name! fun (symbol-name name))
      (eval (list def name fun) env)))

(defun to-string (obj) (anything-to-string obj)) ;; later redefined as generic

(defmacro assert (that) env
  (if (not? (eval that env))
      (js-throw (to-string that))
      #void))

(def Block-Escape (make-class () "Block-Escape"))
(defun make-block-escape () (make-instance Block-Escape))

(defmacro block (name . body) env
  (let ((tag (make-block-escape)) (val #void))
    ($js-try (lambda (exc) (if (eq? tag exc) val (js-throw exc)))
             (apply (eval (list* lambda name body) env)
                    (lambda (the-val) (set! val the-val) (js-throw tag))))))

(defun return-from ((exit Combiner) . val)
  (exit (if (null? val) #void (car val))))

(defmacro unwind-protect (protected . cleanup) env
  (eval (list $unwind-protect protected (list* begin cleanup)) env))

(defmacro scope body env
  (eval (list* let () body) env))

(defmacro set! (place value) env
  (if (instance? place Pair)
      (let (((cmb . args) place))
        (eval (list* (setter (eval cmb env)) value args) env))
      (eval (list $set! place value) env)))

(defmacro fluid-let ((name value) . body) env
  (let ((saved-value (eval name env)))
    (eval (list set! name value) env)
    (unwind-protect (eval (list* begin body) env)
      (eval (list set! name saved-value) env))))

(defun setter (obj) (get-slot obj "setter"))
(defun set-setter! (obj setter) (set-slot! obj "setter" setter))
(set-setter! js-global (lambda (val name) (set-js-global! name val))) ; erm

(defun define-js-method ((name String))
  (defun js-method (rcv . args)
    (apply js-call (list* rcv name args)))
  (eval (list def (intern name) js-method) *top-level-environment*))

(defun define-js-methods names
  (map define-js-method names))

(define-js-methods
  "charAt"
  "concat"
  "slice"
  )

(defun strcat strings
  (apply concat (list* "" strings)))
(def strelt charAt)
(def strslice slice)

;;;; Object System

(provide (defclass
          definterface
          defimplementation
          defgeneric
          defmethod)

   (defmacro defclass (name . stuff) env
     (if (null? stuff)
         (eval (list def name (make-class () (symbol-name name))) env)
         (let (((superclasses . stuff) stuff))
           (let ((c (make-class (map (lambda (sc) (eval sc env)) superclasses)
                                (symbol-name name))))
             (eval (list def name c) env)
             (unless (null? stuff)
               (let (((slots . stuff) stuff))
                 (map (lambda (slot) (eval (list defslot slot) env)) slots)
                 (unless (null? stuff)
                   (let (((#ignore ctor-name args) (car stuff)))
                     (eval (list defconstructor ctor-name name args) env))))))))
     name)
   
   (defmacro definterface (name) env
     (eval (list defclass name ()) env))

   (def defimplementation add-superclass!)

   (defmacro defconstructor (name class slots) env
     (eval (list def name
                 (list typed-lambda slots
                       (list construct-with-slots class (untype slots))))
           env))

   (defmacro construct-with-slots (class slots) env
     (let ((obj (make-instance (eval class env))))
       (map (lambda (slot)
              (set-slot! obj (symbol-name slot) (eval slot env)))
            slots)
       obj))

   (defmacro defslot (name) env
     (let* ((slot (symbol-name name))
            (generic-name (intern (strcat "." slot)))
            (reader (lambda (obj) (get-slot obj slot)))
            (writer (lambda (val obj) (set-slot! obj slot val))))
       (set-setter! reader writer)
       (eval (list def generic-name reader) env))
     name)

   (defmacro defgeneric (name ignored-args . methods) env
     (eval (list def name
                 (lambda (self . otree) (send self (symbol-name name) otree)))
           env)
     (map (lambda (m)
            (let (((#ignore args . body) m))
              (eval (list* defmethod name args body) env)))
          methods)
     name)

   (defmacro defmethod (name (rcv-n-class . rest) . body) env
     (def rcv   (if (pair? rcv-n-class) (car rcv-n-class) rcv-n-class))
     (def class (if (pair? rcv-n-class) (cadr rcv-n-class) Object))
     (put-method! (eval class env)
                  (symbol-name name)
                  (eval (list* vau (list* rcv (untype rest)) #ignore
                               (list* begin (type-assertions rest))
                               body)
                        env))
     name)

   )

;;;; Options

(defclass Option)
(defclass Nothing (Option))
(defvar nothing (make-instance Nothing))
(defclass Just (Option)
  (value)
  (:constructor just (value)))

(defmacro if-option ((name option) then . else) env
  (let ((o (eval option env)))
    (if (instance? o Just)
        (eval (list let (list (list name (.value o))) then) env)
        (unless (null? else)
          (eval (car else) env)))))

(defmacro when-option (name-and-option . then) env
  (eval (list if-option name-and-option (list* begin then) #void) env))

(defun find-if ((pred Combiner) list)
  (if (null? list)
      nothing
      (let ((kar (car list)))
        (if (pred kar)
            (just kar)
            (find-if pred (cdr list))))))

;;;; Condition System

(provide (Condition
          Error
          Warning
          Restart
          Simple-Error
          catch
          handle
          throw
          signal
          default-handler)

  (defclass Condition)
  (defclass Error (Condition))
  (defclass Warning (Condition))
  (defclass Restart (Condition))
  
  (defclass Simple-Error (Error)
    (message)
    (:constructor make-simple-error ((message String))))

  (defvar *handlers-frame-option* nothing)
  
  (defclass Handlers-Frame ()
    (parent-option
     handlers-list)
    (:constructor make-handlers-frame ((parent-option Option)
                                       handlers-list)))

  (defclass Handler ()
    (matcher-function
     handler-function)
    (:constructor make-handler ((matcher-function Combiner)
                                (handler-function Combiner))))

  (defun handler-matches-condition? ((handler Handler) (condition Condition))
    ((.matcher-function handler) condition))
  
  (defun call-with-handlers ((thunk Combiner) handlers-list)
    (fluid-let (*handlers-frame-option*
                (just (make-handlers-frame *handlers-frame-option* handlers-list)))
      (thunk)))

  (defgeneric signal-internal (condition)

    (:method ((condition Condition))
      (defun signal-frame ((frame-option Option))
        (if-option (frame frame-option)
          (progn
            (when-option (handler (find-if (lambda (h)
                                             (handler-matches-condition? h condition))
                                           (.handlers-list frame)))
                         ((.handler-function handler) condition))
            (signal-frame (.parent-option frame)))
          (default-handler condition)))
      (signal-frame *handlers-frame-option*))

    (:method ((message String))
      (signal-internal (make-simple-error message))))

  (defun throw-internal (x)
    (signal-internal x)
    (invoke-debugger x))

  (defgeneric default-handler (condition)
    (:method ((c Condition))
      #void)
    (:method ((w Warning))
      (print w))
    (:method ((e Error))
      (invoke-debugger e))
    (:method ((r Restart))
      (invoke-debugger "unhandled restart")))

  (defun invoke-debugger (x) (js-throw x))
  
  ;; handler ::= ((Class var) . exprs)
  (defmacro handle (expr . handlers) env
    (call-with-handlers (lambda () (eval expr env))
                        (map (lambda (h)
                               (let ((((c v . ac) . exprs) h))
                                 (make-handler (lambda (condition)
                                                 (instance? condition (eval c env)))
                                               (eval (list* lambda (list v) exprs) env))))
                             handlers)))

  (defmacro catch (expr . handlers) env
    (block normal-return
      ((block error-return ; note extra evaluation
         (eval (list* handle (list return-from normal-return expr)
                      (map (lambda (h)
                             (let (((cv . exprs) h))
                               (list cv (list return-from error-return
                                              (list* lambda () exprs)))))
                           handlers))
               env)))))

  (defmacro signal-with-restarts (raiser condition . restarts) env
    (eval (list* catch (list raiser condition) restarts) env))
  
  (defmacro throw condition-and-restarts env
    (apply (wrap signal-with-restarts) (list* throw-internal condition-and-restarts) env))
  
  (defmacro signal condition-and-restarts env
    (apply (wrap signal-with-restarts) (list* signal-internal condition-and-restarts) env))

  ) ; conditions

(defgeneric = (a b)
  (:method ((a Object) b) (eq? a b)))

(defgeneric to-string (obj)
  (:method ((a Object))
    (strcat "#[object " (anything-to-string a) "]"))
  (:method ((a Number))
    (anything-to-string a))
  (:method ((a String))
    (anything-to-string a))
  (:method ((a Symbol))
    (symbol-name a))
  (:method ((a Class))
    (strcat "#[class " (debug-name a) "]"))
  (:method ((a Nil))
    "()")
  (:method ((a Boolean))
    (if a "#t" "#f"))
  (:method ((a Ignore))
    "#ignore")
  (:method ((a Void))
    "#void")
  (:method ((a Undefined))
    "#undefined")
  (:method ((a Combiner))
    (strcat "#[" (debug-name a) "]"))
  (:method ((cmb Compound-Combiner))
    (strcat "#[" (debug-name cmb) " " (to-string (get-slot cmb "lisp_ptree")) "]"))
  (:method ((cmb Wrapper))
    (strcat "#[" (debug-name cmb) " " (to-string (unwrap cmb)) "]"))
  (:method ((a Environment))
    "#[environment]")
  (:method ((p Pair))
    (defun pair-to-string (p)
      (def kar (car p))
      (def kdr (cdr p))
      (if (null? kdr)
          (to-string kar)
          (if (instance? kdr Pair)
              (strcat (to-string kar) " " (pair-to-string kdr))
              (strcat (to-string kar) " . " (to-string kdr)))))
    (strcat "(" (pair-to-string p) ")"))
  (:method ((frm Stack-Frame))
    (strcat (to-string (get-slot frm "cmb")) " " 
            (to-string (get-slot frm "otree"))))
  )

;;;; Numbers

(provide (+ - * /)
  (defmacro define-js-number-binop (name) env
    (def a (intern "a"))
    (def b (intern "b"))
    (def binop (js-binop name))
    (eval (list def (intern name)
                (list typed-lambda (list (list a Number) (list b Number))
                      (list binop a b)))
          env))
  (define-js-number-binop "+")
  (define-js-number-binop "-")
  (define-js-number-binop "*")
  (define-js-number-binop "/"))

(defmacro inc! (var . delta) env
  (eval (list set! var (list + var (if (pair? delta) (car delta) 1))) env))
              
(defmacro dec! (var . delta) env
  (eval (list set! var (list - var (if (pair? delta) (car delta) 1))) env))

;;;; Comparison

(def number< (js-binop "<"))

(defgeneric < (a b)
  (:method ((a Number) (b Number))
    (number< a b)))

(defgeneric > (a b)
  (:method ((a Number) (b Number))
    (number< b a)))

(defgeneric <= (a b)
  (:method (a b)
    (or? (= a b)
         (< a b))))

(defgeneric >= (a b)
  (:method (a b)
    (or? (= a b)
         (> a b))))

;;;; Property Lists

;; Calls fun with name and value of each property in plist.
(defun map-plist (fun plist)
  (if (null? plist)
      ()
      (cons (fun (car plist) (cadr plist))
            (map-plist fun (cddr plist)))))

;;;; Collections

(provide (Iterable
          Iterator
          iterator
          has-next?
          next!
          at)

   (defclass Iterable)
   (defclass Iterator)
   (defgeneric iterator (iterable))
   (defgeneric has-next? (iterator))
   (defgeneric next! (iterator))
   (defgeneric at (iterable index))

   (defmethod at ((s String) (i Number))
      (strelt s i))

)

;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without
;; restriction, including without limitation the rights to use, copy,
;; modify, merge, publish, distribute, sublicense, and/or sell copies
;; of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. ALSO, THERE IS NO KERNEL UNDERGROUND; IT'S ALL
;; JUST RUMOUR AND HEARSAY. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

# Hypermedia Content Model

## Preliminaries

### Low-level Encoding (LLE)

The low-level data encoding consists of arbitrary-sized signed
integers, UTF-8 strings, and lists.

Example low-level data using JSON syntax:

....
-1243

"hello"

["foo", ["bar", 12]]
....

All application and protocol data units are ultimately encoded in LLE.

#### Order

The order among data of different types is number < string < list.

The usual rule that shorter lists sort before longer lists with the
same prefix applies.

### High-level Encoding (HLE)

A high-level encoding with support for features such as records and
decimal numbers is layered on top of the low-level encoding.

#### Lists

Because the high-level encoding uses a format similar to Lisp function
calls for records, plain lists themselves have to be wrapped in a
"call" to "list".

This creates the list [1, 2, 3] in the high-level encoding:

....
["list", 1, 3, 4]
....

#### Records

Records are expressed as a type name a set of fields.

This creates a record of type person with two fields, age and name.

....
["person", ["age", 35], ["name", "Manuel"]]
....

The fields are always sorted by name.

#### Decimal

Arbitrary sized decimal numbers are represented as records with an
exponent and a mantissa, with some special encoding rules to allow
natural sorting by the low-level ordering rules.

A decimal number is represented as a dec record with e (exponent) and
m (mantissa) fields.

This represents the decimal number 123.456:

....
["dec", ["e", 3], ["m", 123456]]
....

A negative decimal is represented as a dec record with both the
exponent and the mantissa negative.

This represents -123.456:

....
["dec", ["e", -3], ["m", -123456]]
....

#### Boolean

Booleans are represented as bool records with a field b that is either
0 or 1, representing true or false respectively.

....
["bool", ["b", 0]]

["bool", ["b", 1]]
....

## Link

The link is the fundamental unit of content.

A link stores a typed relation between a source and a target anchor.

This link of type description has the source /dev/mouse (an absolute
name) and the target "Mouse device" (a string datum):

....
["link",
 ["rel", "description"],
 ["src", ["anchor", ["href", ["/", "dev", "mouse"]]]],
 ["tgt", ["anchor", ["href", "Mouse device"]]]]
....

### Anchor

The source and target anchors of a link can be either names or
arbitrary data.

Anchors that refer to names are the usual hyperlinks, whereas anchors
that refer to data are more like properties or attributes.  At least
one anchor of a link has to be a name.

An anchor is represented as an anchor record with an href field (the
object referred to by the anchor).

An anchor that points to the string "foo":

....
["anchor", ["href", "foo"]]
....

An anchor that points to the name /tmp:

....
["anchor", ["href", ["/", "tmp"]]]
....

### Name

A name is a sequence of path components, similar to a Unix filesystem
path.

There are absolute and relative names.

This absolute name refers to /dev/mouse:

....
["/", "dev", "mouse"]
....

This relative name refers to the name ./docs/index.html in a current
scope:

....
[".", "docs", "index.html"]
....



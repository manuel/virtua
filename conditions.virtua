;; -*- Scheme -*-

;;;;; Condition System

(provide (Condition
          Error
          Warning
          Restart
          Unhandled-Restart-Error
          call-with-handler
          signal
          default-handler)

;;;; Classes

(define-class Condition)
(define-class Error (Condition))
(define-class Warning (Condition))

(define-class Restart (Condition))
(define-class Unhandled-Restart-Error (Error)
   (restart)
   (:constructor unhandled-restart-error (restart)))

;;;; Mechanism

(define *handler-stack* none)

(define-class Handler-Frame ()
   (parent-option
    matcher
    handler)
   (:constructor make-handler-frame (parent-option matcher handler)))

(define call-with-handler
   (lambda (matcher handler thunk)
      (let ((saved-stack *handler-stack*))
         (set! *handler-stack* (option (make-handler-frame *handler-stack*
                                                           matcher
                                                           handler)))
         (unwind-protect (thunk)
            (set! *handler-stack* saved-stack)))))

(define signal
   (lambda (condition)
      (define do-signal
         (lambda (frame-option)
            (if-option (frame frame-option)
               (if ((.matcher frame) condition)
                   ((.handler frame) condition)
                   (do-signal (.parent-option frame)))
               (default-handler condition))))
      (do-signal *handler-stack*)))

;; The default handler generic function is called when a condition is
;; unhandled.

(define-generic default-handler (condition))

(define-method default-handler ((c Condition))
   #void)

(define-method default-handler ((w Warning))
   (print w))

(define-method default-handler ((e Error))
   (invoke-debugger e))

(define-method default-handler ((r Restart))
   (signal (unhandled-restart-error r)))

)
